import React, { useState, useEffect } from "react";
import { v4 as uuidv4 } from 'uuid'; // Import UUID
import '../index.css';

const CreateProduct = () => {
  const [productName, setProductName] = useState("");
  const [productCategory, setProductCategory] = useState("");
  const [image, setImage] = useState(null);
  const [freshness, setFreshness] = useState("");
  const [productPrice, setProductPrice] = useState("");
  const [productNameError, setProductNameError] = useState("");
  const [products, setProducts] = useState([]); // State untuk menyimpan list produk

  // useEffect untuk alert "Welcome"
  useEffect(() => {
    alert("Welcome");
  }, []);

  const handleProductNameChange = (e) => {
    const value = e.target.value;

    // Validasi panjang karakter
    if (value.length > 25) {
      setProductNameError("Product Name must not exceed 25 characters.");
    } else if (value.length > 10) {
      setProductNameError("Product Name should not exceed 10 characters.");
    } else {
      setProductNameError("");
    }

    setProductName(value);
  };

  const handleSubmit = (e) => {
    e.preventDefault();

    // Validasi saat submit
    if (productName === "") {
      alert("Please enter a valid product name.");
      return;
    }

    // Membuat produk baru dengan UUID
    const newProduct = {
      id: uuidv4(), // Generate UUID untuk ID unik
      productName,
      productCategory,
      freshness,
      productPrice,
    };

    // Menambahkan produk baru ke dalam list produk
    setProducts([...products, newProduct]);

    // Membersihkan input form
    setProductName("");
    setProductCategory("");
    setImage(null);
    setFreshness("");
    setProductPrice("");
  };

  const handleDelete = (id) => {
    // Konfirmasi penghapusan
    const confirmDelete = window.confirm("Are you sure you want to delete this product?");
    if (confirmDelete) {
      // Hapus produk dari list berdasarkan ID
      setProducts(products.filter((product) => product.id !== id));
    }
  };

  return (
    <div className="max-w-3xl mx-auto p-6 bg-white rounded shadow-md mt-1">
      <h2 className="text-3xl font-bold mb-6 text-center">Create Product</h2>
      <form onSubmit={handleSubmit}>
        {/* Form Inputs */}
        <div className="mb-4">
          <label htmlFor="productName" className="block text-gray-700">
            Product Name
          </label>
          <input
            type="text"
            className="w-full mt-1 px-4 py-3 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-indigo-500"
            id="productName"
            value={productName}
            onChange={handleProductNameChange}
            required
          />
          {productNameError && (
            <p className="text-red-500 text-sm mt-1">{productNameError}</p>
          )}
        </div>

        <div className="mb-4">
          <label htmlFor="productCategory" className="block text-gray-700">
            Product Category
          </label>
          <select
            className="w-full mt-1 px-4 py-3 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-indigo-500"
            id="productCategory"
            value={productCategory}
            onChange={(e) => setProductCategory(e.target.value)}
            required
          >
            <option value="">Choose...</option>
            <option value="electronics">Electronics</option>
            <option value="furniture">Furniture</option>
            <option value="clothing">Clothing</option>
          </select>
        </div>

        {/* Rest of your form inputs */}

        <button
          type="submit"
          className="w-full bg-indigo-500 text-white py-3 rounded hover:bg-indigo-600"
        >
          Add Product
        </button>
      </form>

      {/* Tabel untuk menampilkan produk */}
      <h2 className="text-2xl font-bold mt-6 text-center">Product List</h2>
      <div className="overflow-x-auto">
        <table className="min-w-full mt-4 border border-gray-300">
          <thead>
            <tr>
              <th className="border border-gray-300 px-4 py-2 font-bold">No</th>
              <th className="border border-gray-300 px-4 py-2 font-bold">Product Name</th>
              <th className="border border-gray-300 px-4 py-2 font-bold">Product Category</th>
              <th className="border border-gray-300 px-4 py-2 font-bold">Product Freshness</th>
              <th className="border border-gray-300 px-4 py-2 font-bold">Product Price</th>
              <th className="border border-gray-300 px-4 py-2 font-bold">Actions</th>
            </tr>
          </thead>
          <tbody>
            {products.map((product, index) => (
              <tr key={product.id}>
                <td className="border border-gray-300 px-4 py-2">{index + 1}</td>
                <td className="border border-gray-300 px-4 py-2">{product.productName}</td>
                <td className="border border-gray-300 px-4 py-2">{product.productCategory}</td>
                <td className="border border-gray-300 px-4 py-2">{product.freshness}</td>
                <td className="border border-gray-300 px-4 py-2">{product.productPrice}</td>
                <td className="border border-gray-300 px-4 py-2">
                  <button
                    onClick={() => handleDelete(product.id)}
                    className="bg-red-500 text-white px-3 py-1 rounded hover:bg-red-600"
                  >
                    Delete
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default CreateProduct;
